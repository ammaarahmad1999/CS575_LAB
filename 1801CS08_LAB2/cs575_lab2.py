# -*- coding: utf-8 -*-
"""CS575_LAB2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RDQaUEbUIhUHBkBaBJFvWbKktCQ1iErL
"""

import matplotlib.pyplot as plt
import numpy as np
import scipy.stats as stats
from scipy.stats import norm
import math

"""#**Q1**"""

n_experiments = 1000
n_bernoulli_trials = 100

rng = np.random.RandomState(123)
outcomes = np.empty(n_experiments, dtype=np.float)

for i in range(n_experiments):
    num = 10**i
    coin_flips = rng.randint(0, 2, size=n_bernoulli_trials)
    head_counts = np.sum(coin_flips)
    outcomes[i] = head_counts

plt.hist(outcomes, density=True)
plt.xlabel('Number of heads in 100 coin flips')
plt.ylabel('Probability of outcome')
plt.show()

"""#**Q2**"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cp /content/drive/MyDrive/state.csv ./

import pandas as pd
df = pd.read_csv("state.csv")

df

outcomes = df["Murder.Rate"]
plt.hist(outcomes, density = True)
plt.xlabel('Murder_Rate')
plt.ylabel('Probability of outcome')
plt.show()

plt.boxplot(outcomes,labels=["Murder_Rate"])
plt.show()

from statsmodels.graphics.gofplots import qqplot
qqplot(outcomes, line='s')
plt.show()

stats.normaltest(outcomes)

stats.skewtest(outcomes)

stats.kurtosistest(outcomes)

"""#**Q3**"""

mu = 100
sigma = 5
x = np.linspace(mu - 5*sigma, mu + 5*sigma, 500)
plt.plot(x, norm.pdf(x, mu, sigma))
plt.show()

"""#**Q3(a)**"""

mu = 200
sigma = 5
x = np.linspace(mu - 5*sigma, mu + 5*sigma, 500)
plt.plot(x, norm.pdf(x, mu, sigma))
plt.show()

"""#**Q3(b)**"""

mu = 100
sigma = 10
x = np.linspace(mu - 5*sigma, mu + 5*sigma, 500)
plt.plot(x, norm.pdf(x, mu, sigma))
plt.show()

"""#**Q3(c)**"""

mu = 200
sigma = 10
x = np.linspace(mu - 5*sigma, mu + 5*sigma, 500)
plt.plot(x, norm.pdf(x, mu, sigma))
plt.show()

"""#**Q4**"""

n = 100
rng = np.random.RandomState(123)
dice_rolls = rng.choice(np.arange(1, 7), size = 100, p=[0.1, 0.1, 0.1, 0.1, 0.5, 0.1])

outcome = np.bincount(dice_rolls)[1:] / n * 100 
plt.bar(range(1, 7), outcome)
plt.ylabel('Probability of event')
plt.xlabel('Die roll outcome')

p = 0.1 # probability_rolling a 6
n = 100 # number of die rolls

rng = np.random.RandomState(1)
outcomes = rng.binomial(n, p, size=1000)

plt.hist(outcomes, density=True)
plt.xlabel('Number of rolling a 6 in 100 die rolls')
plt.ylabel('Probability of outcome')
plt.show()

def probability_success_4(k, no_of_experiments):
  outcomes = []
  rng = np.random.RandomState(10)
  for i in range(no_of_experiments):
    dice_rolls = rng.choice(np.arange(1, 7), size = 100, p=[0.1, 0.1, 0.1, 0.1, 0.5, 0.1])
    num_six = (dice_rolls == k).sum()
    outcomes.append(num_six)
  return outcomes

outcomes = probability_success_4(6, 1000)
plt.hist(outcomes, density=True)
plt.xlabel('Number of rolling a 6 in 100 die rolls')
plt.ylabel('Probability of outcome')
plt.show()

"""#**Q5**"""

n = 1000
rng = np.random.RandomState(123)
dice_rolls = rng.choice(np.arange(1, 7), size = 1000, p=[0.1, 0.1, 0.1, 0.4, 0.2, 0.1])

outcome = np.bincount(dice_rolls)[1:] / n * 100 
plt.bar(range(1, 7), outcome)
plt.ylabel('Probability of event')
plt.xlabel('Die roll outcome')

p = 0.1 # probability_rolling a 6
n = 1000 # number of die rolls

rng = np.random.RandomState(1)
outcomes = rng.binomial(n, p, size=1000)

plt.hist(outcomes, density=True)
plt.xlabel('Number of rolling a 6 in 1000 die rolls')
plt.ylabel('Probability of outcome')
plt.show()

def probability_success_5(k, no_of_experiments):
  outcomes = []
  rng = np.random.RandomState(1)
  for i in range(no_of_experiments):
    dice_rolls = rng.choice(np.arange(1, 7), size = 1000, p=[0.1, 0.1, 0.1, 0.4, 0.2, 0.1])
    num_six = (dice_rolls == k).sum()
    outcomes.append(num_six)
  return outcomes

outcomes = probability_success_5(6, 1000)
plt.hist(outcomes, density=True)
plt.xlabel('Number of rolling a 6 in 1000 die rolls')
plt.ylabel('Probability of outcome')
plt.show()

"""#**Q6**


"""

def draw_z_score(x, q25, cond, mu, sigma, title):
    y = norm.pdf(x, mu, sigma)
    z = x[cond]
    plt.plot(x, y)
    plt.fill_between(z, 0, norm.pdf(z, mu, sigma))
    plt.axvline(q25, color='red')
    plt.title(title)
    plt.show()

mu = 50
sigma = 10
q25 = norm.ppf(0.25, loc = mu, scale = sigma)
x = np.linspace(mu - 5*sigma, mu + 5*sigma, 2000)
draw_z_score(x, q25, x>=q25, 50, 10, 'Area above 25 precentile')