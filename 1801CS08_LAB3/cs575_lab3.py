# -*- coding: utf-8 -*-
"""CS575_LAB3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EbB67cG9D-jbFaI92Y1GMzlVj9ZAFX78
"""

import matplotlib.pyplot as plt
import numpy as np
import scipy.stats as stats
from scipy.stats import norm, pearsonr
import math
import pandas as pd
from statsmodels.graphics.gofplots import qqplot

import matplotlib.pyplot as plt
plt.style.use('ggplot')

"""#**Task1**"""

# read the csv file
df = pd.read_csv('https://raw.githubusercontent.com/rishiraj-cs/Datasets-tutorial-Lab3/main/Automobile_data.csv')
# print the first 5 rows of the data set
df.head()

df.replace('?',np.NaN, inplace = True)
df.dropna(inplace = True)

"""#Q1"""

df_temp = df[['bore', 'stroke', 'compression-ratio', 'horsepower']]
df_temp = df_temp.apply(pd.to_numeric)

df_temp.dtypes

df_temp.corr()

axl = df_temp.plot(kind='scatter', x='bore', y='stroke', color='blue', alpha=0.5, figsize=(15, 10))
plt.title('Relationship between Bore and Stroke ', size=20)
plt.xlabel('Bore', size=18)
plt.ylabel('Stroke', size=18)

axl = df_temp.plot(kind='scatter', x='bore', y='compression-ratio', color='blue', alpha=0.5, figsize=(15, 10))
plt.title('Relationship between Bore and compression-ratio', size=20)
plt.xlabel('Bore', size=18)
plt.ylabel('compression-ratio', size=18)

axl = df_temp.plot(kind='scatter', x='bore', y='horsepower', color='blue', alpha=0.5, figsize=(15, 10))
plt.title('Relationship between Bore and horsepower', size=20)
plt.xlabel('Bore', size=18)
plt.ylabel('horsepower', size=18)

axl = df_temp.plot(kind='scatter', x='stroke', y='horsepower', color='blue', alpha=0.5, figsize=(15, 10))
plt.title('Relationship between stroke and horsepower', size=20)
plt.xlabel('stroke', size=18)
plt.ylabel('horsepower', size=18)

axl = df_temp.plot(kind='scatter', x='stroke', y='compression-ratio', color='blue', alpha=0.5, figsize=(15, 10))
plt.title('Relationship between stroke and compression-ratio', size=20)
plt.xlabel('stroke', size=18)
plt.ylabel('compression-ratio', size=18)

axl = df_temp.plot(kind='scatter', x='compression-ratio', y='horsepower', color='blue', alpha=0.5, figsize=(15, 10))
plt.title('Relationship between compression-ratio and horsepower', size=20)
plt.xlabel('compression-ratio', size=18)
plt.ylabel('horsepower', size=18)

"""#Q2"""

df_temp = df[['wheel-base', 'stroke', 'price']]
df_temp = df_temp.apply(pd.to_numeric)

#Correlation between Stroke and Price
corr = df_temp['stroke'].corr(df_temp['price'])
print(f'Correlation Coefficient between Stroke and Price = {corr}')

# Scatter Plot of Price and Stroke

axl = df_temp.plot(kind='scatter', x='stroke', y='price', color='blue', alpha=0.5, figsize=(15, 10))
plt.title('Relationship between Stroke and Price ', size=20)
plt.xlabel('Stroke', size=18)
plt.ylabel('Price', size=18)

"""#Q3"""

corr,p_value=pearsonr(df_temp['wheel-base'], df_temp['price'])
print(f'Pearsons correlation: {corr} and p-value is: {p_value}')

"""#Q4"""

axl = df_temp.plot(kind='scatter', x='stroke', y='price', color='blue', alpha=0.5, figsize=(15, 10))
plt.title('Relationship between Stroke and Price ', size=20)
linear = np.polyfit(df_temp.stroke, df_temp.price, 1)
plt.plot(df_temp.stroke, linear[0] * df_temp.stroke + linear[1], color='darkblue', linewidth=2)
#plt.text(65, 230, 'y={:.2f}+{:.2f}*x'.format(linear[1], linear[0]), color='darkblue', size=12)
plt.xlabel('Stroke', size=18)
plt.ylabel('Price', size=18)

"""#Q5"""

df_temp = df[['bore', 'stroke', 'compression-ratio', 'horsepower', 'city-mpg', 'price']]
df_temp = df_temp.apply(pd.to_numeric)

import seaborn as sns
sns.set_theme(color_codes=True)
sns.set(rc={'figure.figsize':(11.7,8.27)})
dataplot = sns.heatmap(df_temp.corr(), cmap="YlGnBu", annot=True)
# displaying heatmap
plt.show()

"""#**Task2**"""

df_stocks=pd.read_csv("https://raw.githubusercontent.com/rishiraj-cs/Datasets-tutorial-Lab3/main/stocks.csv", index_col=0)
df_bonds=pd.read_csv("https://raw.githubusercontent.com/rishiraj-cs/Datasets-tutorial-Lab3/main/bonds.csv",index_col=0)

"""#Q1"""

df_merge = df_stocks.merge(df_bonds, left_index = True, right_index=True, how = 'inner')
df_merge

"""#Q2"""

# Compute percent change using pct_change()
returns = df_merge.pct_change()

# Compute correlation using corr()
correlation = returns['SP500'].corr(returns['US10Y'])
print("Correlation of stocks and bonds: ", correlation)

"""#Q3"""

# Scatter plot of Height and Weight

ax1 = returns.plot(kind='scatter', x='SP500', y='US10Y', color='blue', alpha=0.5, figsize=(15, 7))
plt.title('Relationship between Stock Market and Bond Market', size=24)
plt.xlabel('Stocks', size=18)
plt.ylabel('Bonds', size=18)

"""#**Task3**"""

import pandas as pd
import numpy as np
# read the csv file
df = pd.read_csv('https://raw.githubusercontent.com/rishiraj-cs/Datasets-tutorial-Lab3/main/numberline.csv')

# print the first 5 rows of the data set
df.head()

"""#Q1"""

# Scatter plot of Height and Weight

ax1 = df.plot(kind='scatter', x='true_value', y='fourth_graders_guess', color='blue', alpha=0.5, figsize=(15, 7))
linear = np.polyfit(df.true_value, df.fourth_graders_guess, 1)
plt.title('Relationship between true_value and fourth_graders_guess', size=24)
plt.plot(df.true_value, linear[0] * df.true_value + linear[1], color='darkblue', linewidth=2)
plt.text(65, 230, 'y={:.2f}+{:.2f}*x'.format(linear[1], linear[0]), color='darkblue', size=12)
plt.xlabel('true_value', size=18)
plt.ylabel('fourth_graders_guess', size=18)

"""#Q2"""

# Scatter plot of Height and Weight

ax1 = df.plot(kind='scatter', x='true_value', y='second_graders_guess', color='blue', alpha=0.5, figsize=(15, 7))
linear = np.polyfit(df.true_value, df.second_graders_guess, 1)
plt.title('Relationship between true_value and second_graders_guess', size=24)
plt.plot(df.true_value, linear[0] * df.true_value + linear[1], color='darkblue', linewidth=2)
plt.text(65, 230, 'y={:.2f}+{:.2f}*x'.format(linear[1], linear[0]), color='darkblue', size=12)
plt.xlabel('true_value', size=18)
plt.ylabel('second_graders_guess', size=18)

from math import log
def log_value(x):
  return log(x)
df['log_value'] = df['true_value'].apply(log_value)

# Scatter plot of Height and Weight

ax1 = df.plot(kind='scatter', x='log_value', y='second_graders_guess', color='blue', alpha=0.5, figsize=(15, 7))
linear = np.polyfit(df.log_value, df.second_graders_guess, 1)
plt.title('Relationship between log_value and second_graders_guess', size=24)
plt.plot(df.log_value, linear[0] * df.log_value + linear[1], color='darkblue', linewidth=2)
plt.text(65, 230, 'y={:.2f}+{:.2f}*x'.format(linear[1], linear[0]), color='darkblue', size=12)
plt.xlabel('log_value', size=18)
plt.ylabel('second_graders_guess', size=18)

import seaborn as sns

# residual plot 500 females
fig = plt.figure(figsize = (10, 7))
sns.residplot(df.true_value, df.second_graders_guess, color='magenta')

# title and labels
plt.title('Residual plot', size=24)
plt.xlabel('log_value', size=18)
plt.ylabel('second_graders_guess', size=18)

import seaborn as sns

# residual plot 500 females
fig = plt.figure(figsize = (10, 7))
sns.residplot(df.log_value, df.second_graders_guess, color='magenta')

# title and labels
plt.title('Residual plot', size=24)
plt.xlabel('log_value', size=18)
plt.ylabel('second_graders_guess', size=18)

"""#**Task3 Q3** Explain the Residual Plot in 2-3 lines

#**Task 4**
"""

# read the csv file
df1 = pd.read_csv('https://raw.githubusercontent.com/rishiraj-cs/Datasets-tutorial-Lab3/main/ADANIPORTS.csv')
df2 = pd.read_csv("https://raw.githubusercontent.com/rishiraj-cs/Datasets-tutorial-Lab3/main/CIPLA.csv")
df3 = pd.read_csv("https://raw.githubusercontent.com/rishiraj-cs/Datasets-tutorial-Lab3/main/HDFCBANK.csv")
df4 = pd.read_csv("https://raw.githubusercontent.com/rishiraj-cs/Datasets-tutorial-Lab3/main/MARUTI.csv")
df5 = pd.read_csv("https://raw.githubusercontent.com/rishiraj-cs/Datasets-tutorial-Lab3/main/NTPC.csv")
df6 = pd.read_csv("https://raw.githubusercontent.com/rishiraj-cs/Datasets-tutorial-Lab3/main/TATAMOTORS.csv")

df1.drop(columns = ['Symbol', 'Series', 'Prev Close', 'Open', 'High', 'Low', 'Last',
       'Volume', 'Turnover', 'Trades', 'Deliverable Volume', '%Deliverble'], inplace = True)
df2.drop(columns = ['Symbol', 'Series', 'Prev Close', 'Open', 'High', 'Low', 'Last',
       'Volume', 'Turnover', 'Trades', 'Deliverable Volume', '%Deliverble'], inplace = True)
df3.drop(columns = ['Symbol', 'Series', 'Prev Close', 'Open', 'High', 'Low', 'Last',
       'Volume', 'Turnover', 'Trades', 'Deliverable Volume', '%Deliverble'], inplace = True)
df4.drop(columns = ['Symbol', 'Series', 'Prev Close', 'Open', 'High', 'Low', 'Last',
       'Volume', 'Turnover', 'Trades', 'Deliverable Volume', '%Deliverble'], inplace = True)
df5.drop(columns = ['Symbol', 'Series', 'Prev Close', 'Open', 'High', 'Low', 'Last',
       'Volume', 'Turnover', 'Trades', 'Deliverable Volume', '%Deliverble'], inplace = True)
df6.drop(columns = ['Symbol', 'Series', 'Prev Close', 'Open', 'High', 'Low', 'Last',
       'Volume', 'Turnover', 'Trades', 'Deliverable Volume', '%Deliverble'], inplace = True)

#Set Date Column as Index
df1.set_index('Date', inplace = True)
df2.set_index('Date', inplace = True)
df3.set_index('Date', inplace = True)
df4.set_index('Date', inplace = True)
df5.set_index('Date', inplace = True)
df6.set_index('Date', inplace = True)

#Renaming Columns before merging
df1.columns = ['ADANIPORTS-close', 'ADANIPORTS-VWAP']
df2.columns = ['CIPLA-close', 'CIPLA-VWAP']
df3.columns = ['HDFC-close', 'HDFC-VWAP']
df4.columns = ['MARUTI-close', 'MARUTI-VWAP']
df5.columns = ['NTPC-close', 'NTPC-VWAP']
df6.columns = ['TATAMOTORS-close', 'TATAMOTORS-VWAP']

#Drop Duplicates
df1.drop_duplicates(inplace = True)
df2.drop_duplicates(inplace = True)
df3.drop_duplicates(inplace = True)
df4.drop_duplicates(inplace = True)
df5.drop_duplicates(inplace = True)
df6.drop_duplicates(inplace = True)

df = df1.merge(df2, left_index = True, right_index=True, how = 'inner')
df = df.merge(df3, left_index = True, right_index=True, how = 'inner')
df = df.merge(df4, left_index = True, right_index=True, how = 'inner')
df = df.merge(df5, left_index = True, right_index=True, how = 'inner')
df = df.merge(df6, left_index = True, right_index=True, how = 'inner')

df.head()

"""#Q1"""

df['ADANIPORTS-VWAP'].plot(label = "ADANIPORTS", figsize = (15,7))
df['CIPLA-VWAP'].plot(label = "CIPLA", figsize = (15,7))
df['HDFC-VWAP'].plot(label = "HDFC", figsize = (15,7))
df['MARUTI-VWAP'].plot(label = "MARUTI", figsize = (15,7))
df['NTPC-VWAP'].plot(label = "NTPC", figsize = (15,7))
df['TATAMOTORS-VWAP'].plot(label = "TATAMOTORS", figsize = (15,7))
plt.legend()

df_close = df.drop(columns = ['ADANIPORTS-VWAP', 'CIPLA-VWAP', 'HDFC-VWAP', 'MARUTI-VWAP', 'NTPC-VWAP', 'TATAMOTORS-VWAP'])

df_close.dtypes

"""#Q2"""

import seaborn as sns
sns.set_theme(color_codes=True)
sns.set(rc={'figure.figsize':(11.7,8.27)})
dataplot = sns.heatmap(df_close.corr(), cmap="YlGnBu", annot=True)
  
# displaying heatmap
plt.show()