# -*- coding: utf-8 -*-
"""CS575_Midsem.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c45JEhUOLUJ8BpP04ca-efJkCzICJlA8
"""

import matplotlib.pyplot as plt
import numpy as np
import scipy.stats as stats
from scipy.stats import norm, pearsonr, skew, kurtosis
import math
import pandas as pd
from statsmodels.graphics.gofplots import qqplot

from matplotlib.pyplot import figure
import seaborn as sns
plt.style.use('ggplot')

"""#**Q1**"""

df = pd.read_csv("https://raw.githubusercontent.com/ammaarahmad1999/Time_Series_Dataset/main/CommunityCrime.csv")

df = df[['ViolentCR', 'householdsize', 'PctUnemployed', 'PctFam2Par', 'PctRecentImmig', 'PctHousOccup', 'RentMedian', 'PctUsePubTrans']]

df.to_csv("Community_Crime_Excel.csv", index = None)

df.describe()

df.skew()

df.kurtosis()

def exploringData(column_name):
  figure(figsize=(6, 3), dpi=80)
  sns.boxplot(x=df[column_name])
  figure(figsize=(6, 3), dpi=80)
  plt.hist(df[column_name], density = True, color="blue")
  plt.xlabel(column_name, size=18)
  plt.ylabel('Frequency', size=18)
  plt.show()

columns = list(df.columns)
for column in columns:
  exploringData(column)

sns.set_theme(color_codes=True)
sns.set(rc={'figure.figsize':(11.7,8.27)})
dataplot = sns.heatmap(df.corr(), cmap="YlGnBu", annot=True)
# displaying heatmap
plt.show()

"""#**Q2**"""

CrimeRate = df['ViolentCR']

from sklearn.linear_model import LinearRegression
X = df.drop(columns = ['ViolentCR'])
Y = CrimeRate
regression = LinearRegression()
model = regression.fit(X, Y)
print('Intercept:', model.intercept_)
print('Coefficients:', model.coef_)

# Evaluate model by using it's R^2 score 
r2 = model.score(X, Y)
print(f"R square of model = {r2}")

import statsmodels.api as sm
X = df.drop(columns = ['ViolentCR'])
X = sm.add_constant(X) # adding a constant
olsmod = sm.OLS(Y, X).fit()
print(olsmod.summary())

"""#**Q3**"""

def sample_stats(size):
  df_sample = df.sample(size, random_state=size)
  X = df_sample.drop(columns = ['ViolentCR'])
  Y = df_sample['ViolentCR']
  regression = LinearRegression()
  model = regression.fit(X, Y)
  r2 = model.score(X, Y)
  intercept = model.intercept_
  coeff = model.coef_
  X = sm.add_constant(X) # adding a constant
  olsmod = sm.OLS(Y, X).fit()
  f_value = olsmod.fvalue
  p_value = olsmod.f_pvalue
  sample_stat = np.insert(coeff, 0, [r2,f_value,p_value,intercept])

  return sample_stat, olsmod

sample_stat, olsmod = sample_stats(50)
print(olsmod.summary())

sample_stat, olsmod = sample_stats(100)
print(olsmod.summary())

sample_stat, olsmod = sample_stats(200)
print(olsmod.summary())

sample_stat, olsmod = sample_stats(500)
print(olsmod.summary())

sample_stat, olsmod = sample_stats(1000)
print(olsmod.summary())

column_values = ['r2', 'f-stats', 'p-value', 'intercept', 'coeff1', 'coeff2', 'coeff3', 'coeff4', 'coeff5', 'coeff6', 'coeff7']
stats_value = np.empty([0,len(column_values)])
index_value = [50, 100, 200, 300, 400, 500, 1000, 1994]
for x in index_value:
  sample_stat, olsmod = sample_stats(x)
  stats_value = np.append(stats_value, [sample_stat], axis = 0)
df_stats = pd.DataFrame(data = stats_value, index = index_value, columns = column_values)
df_stats

"""#**Q4**"""

def normal_distribution(seed, num, var, var_error):

  sigma = math.sqrt(var)
  sigma_error = math.sqrt(var_error)
  np.random.seed(seed = seed)
  x = np.random.normal(0, sigma, num)
  e = np.random.normal(0, sigma_error, num)
  y = 2.5 - 1.0*x + e
  df = pd.DataFrame({'x_value':x, 'e_value': e, 'y_value': y})
  return df

def scatter_plot(df):
  axl = df.plot(kind='scatter', x='x_value', y='y_value', color='darkblue', alpha=0.5, figsize=(12, 8))
  plt.title('Scatter Plot of Y = 2.50 - 1.0 * X + e', size=20)
  plt.plot(df.x_value, - 1.0 * df.x_value + 2.5, color='darkblue', linewidth=2)
  plt.xlabel('x_value', size=18)
  plt.ylabel('y_value', size=18)

def scatter_samples(df, df_25, df_75):

  axl = df_25.plot(kind='scatter', x='x_value', y='y_value', color='blue', alpha=0.5, figsize=(12, 8))
  df_75.plot(kind='scatter', x='x_value', y='y_value', color='magenta', alpha=0.5, figsize=(12, 8), ax = axl)
  plt.plot(df.x_value, - 1.0 * df.x_value + 2.5, color='darkblue', linewidth=2)
  linear_25 = np.polyfit(df_25.x_value, df_25.y_value, 1)
  plt.plot(df_25.x_value, linear_25[0] * df_25.x_value + linear_25[1], color='green', linewidth=2)
  linear_75 = np.polyfit(df_75.x_value, df_75.y_value, 1)
  plt.plot(df_75.x_value, linear_75[0] * df_75.x_value + linear_75[1], color='orange', linewidth=2)

  # regression equations
  #plt.text(65, 230, 'y={:.2f}+{:.2f}*x'.format(linear_25[1], linear_25[0]), color='green', size=12)
  #plt.text(65, 130, 'y={:.2f}+{:.2f}*x'.format(linear_75[1], linear_75[0]), color='orange', size=12)

  # legend, title and labels.
  plt.legend(labels=['Original Regression Line', 'Regression Line of 25% examples', 'Regression Line of 75% examples', '25% Samples', '75% Samples'])
  plt.title('Scatter Plot', size=20)
  plt.xlabel('x_value', size=18)
  plt.ylabel('y_value', size=18)

df = normal_distribution(0, 100, 2, 3)
df_25 = df.iloc[0:25]
df_75 = df.iloc[25:]
df.head(10)

"""#Q4a"""

scatter_plot(df)

"""#Q4b"""

scatter_samples(df, df_25, df_75)

"""#Q4c"""

df = normal_distribution(100, 1000, 4, 9)
df_25 = df.iloc[0:250]
df_75 = df.iloc[250:]
df.head(10)

scatter_plot(df)

scatter_samples(df, df_25, df_75)

df = normal_distribution(50, 500, 9, 1)
df_25 = df.iloc[0:125]
df_75 = df.iloc[125:]
df.head(10)

scatter_plot(df)

scatter_samples(df, df_25, df_75)

"""#**Q5**"""

arr = np.array([1,3,6,7,9,10])
population_mean = np.mean(arr)

"""#Q5a"""

sample_means = []
for i, x in enumerate(arr):
  for j in range(i+1, 6):
    temp = (x + arr[j])/2
    sample_means.append(temp)

mn = np.mean(sample_means)
print(f'Population Mean : {population_mean}')
print(f'Mean of Sample Means : {mn}')

"""#Q5c"""

mn = np.mean(sample_means)
std = np.std(sample_means)
plt.hist(sample_means, density = True, color='red')
plt.axvline(mn, color='blue')
plt.axvline(mn-2*std, color = 'black')
plt.axvline(mn+2*std, color = 'black')
plt.xlabel('Sample_Mean')
plt.ylabel('Probability Density')
plt.show()

s = pd.Series(sample_means)
mn = s.mean()
std = s.std()
ax = s.plot.kde()
plt.axvline(mn, color='blue')
plt.axvline(mn-2*std, color = 'black')
plt.axvline(mn+2*std, color = 'black')

"""#Q5b"""

sample_means = []
for i, x in enumerate(arr):
  for j in range(i+1, 6):
    for k in range(j+1, 6):
      temp = (x + arr[j] + arr[k])/3
      sample_means.append(temp)

mn = np.mean(sample_means)
print(f'Population Mean : {population_mean}')
print(f'Mean of Sample Means : {mn}')

"""#Q5c"""

mn = np.mean(sample_means)
std = np.std(sample_means)
plt.hist(sample_means, density = True, color = 'red')
plt.axvline(mn, color='blue')
plt.axvline(mn-2*std, color = 'black')
plt.axvline(mn+2*std, color = 'black')
plt.xlabel('Sample_Mean')
plt.ylabel('Probability Density')
plt.show()

s = pd.Series(sample_means)
mn = s.mean()
std = s.std()
ax = s.plot.kde()
plt.axvline(mn, color='blue')
plt.axvline(mn-2*std, color = 'black')
plt.axvline(mn+2*std, color = 'black')